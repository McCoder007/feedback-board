rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // More permissive rules for boards during testing
    match /boards/{boardId} {
      // Allow any authenticated user to create boards
      allow create: if request.auth != null;
      
      // Allow any user (authenticated or not) to read boards
      allow read: if true;
      
      // Allow any user to update only the updatedAt field
      // Allow the owner to update or delete their boards
      allow update: if (request.auth != null && resource.data.ownerId == request.auth.uid) || 
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['updatedAt']));
      
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Updated rules for items - allow all users (including unauthenticated) to create items
    match /items/{itemId} {
      // Allow any user (authenticated or not) to create items
      allow create: if true;
      
      // Allow any user (authenticated or not) to read items
      allow read: if true;
      
      // Allow any user (authenticated or not) to update votes and voters
      // This allows anonymous voting
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes', 'voters', 'updatedAt']) ||
                    (request.auth != null && 
                    (resource.data.authorId == request.auth.uid || 
                     get(/databases/$(database)/documents/boards/$(resource.data.boardId)).data.ownerId == request.auth.uid));
      
      // Only allow authenticated users who are the author or board owner to delete items
      allow delete: if request.auth != null && 
                    (resource.data.authorId == request.auth.uid || 
                     get(/databases/$(database)/documents/boards/$(resource.data.boardId)).data.ownerId == request.auth.uid);
    }
    
    // Allow users to read and write their own user data
    match /users/{userId} {
      allow create, read, update, delete: if request.auth != null && userId == request.auth.uid;
    }
  }
} 